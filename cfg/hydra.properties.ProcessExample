###########################################################################
# Copyright 2013 Mike Deats
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
###########################################################################

 
# Hydra Build properties example
#
# This file shows an example Hyrda build, with a fairly complex build graph,
# using the Python multiprocessing module, with a mix of Ant and command-line
# build-steps. It also sets the max number of processes 4
# 

[main]
ProjectName: HydraProcessExample
BuildType: process
ParallelCount: 4

# Build graph section
#
# For this project we have 10 steps, with the following requirements:
# - Step 1 cleans the build and must be completed first
# - Steps 2-4 compile the 3 modules and must be completed before continuing, 
#   but they can be done in any order since the packages don't depend on each 
#   other
# - Steps 5-7 execute the tests suites on the modules. They are structured such 
#   that they don't have any dependencies on each other, but they all use all 3 
#   modules.
# - Step 8 packages the jar files, and must be executed after the tests, but 
#   before deployment
# - Step 9 uploads the jars to the production server
# - Step 10 uploads the test results to the FTP server
# 
# Thus, the build graph looks like this:
# 
# step1
#   |
# step2, step3, step4
#               / | \
#              /  |  \
#         step5 step6 step7
#                       |
#                     step8
#                       |
#                     step9, step10
#
# 
# In this scenario, Hydra would execute the steps like so:
#
#  1. Execute Step1
#  2. Wait for Step1, execute Step2
#  3. Execute Step3
#  4. Execute Step4
#  5. Wait for Step4, execute Step5
#  6. Wait for Step4, execute Step6
#  7. Wait for Step4, execute Step7
#  8. Wait for Step7, execute Step8
#  9. Wait for Step8, execute Step9
# 10. Execute Step10
#
# This means that the build would execute in parallel during steps 2-4 (3 processes), 
# 5-7 (3 processes), and 9-10 (2 processes)


# Sequential section. Steps 1 and 2 will execute in sequence
#
[build-step-1]
StepName: Step1
Command: ant clean

# Parallel section. Steps 2-4 will execute in parallel once Step1 completes
#
[build-step-2]
ParentStep: Step1
Command: ant compileModule1

[build-step-3]
Command: ant compileModule2

[build-step-4]
Command: ant compileModule3

# Sequential/Parallel section. Steps 5-7 will execute in parallel once Step4 completes
#
# Note that the parent step has no StepName, so we use the section name instead
#
[build-step-5]
StepName: Step5
ParentStep: build-step-4
Command: ant testSuite1

[build-step-6]
StepName: Step6
ParentStep: build-step-4
Command: ant testSuite2

[build-step-7]
StepName: Step7
ParentStep: build-step-4
Command: ant testSuite3

# Sequential section. Steps 8 and 9 will execute in sequence
#
[build-step-8]
StepName: Step8
ParentStep: Step7
Command: ant packageJars


# Parallel section. Steps 9 and 10 will execute in parallel once Step8 completes
#
[build-step-9]
StepName: Step9
ParentStep: Step8
Command: deploy_to_production.sh

[build-step-10]
StepName: Step10
Command: upload_test_results_to_ftp_server.sh